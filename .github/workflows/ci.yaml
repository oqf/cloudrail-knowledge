name: CI

on:
  push:
    branches: [ CR-2713-ci-dependabot ]
  pull_request:
    branches: [ main ]

jobs:

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Dependency check
        uses: dependency-check/Dependency-Check_Action@main
        id: DependencyCheck
        with:
          project: 'cloudrail-knowledge Dependency check'
          path: '.'
          format: 'HTML'
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports
      - name: Dependency check2
        uses: olozz/depcheckaction@main
        id: DependencyCheck2
        with:
          project: 'cloudrail-knowledge Dependency check2'
          path: '.'
          format: 'HTML'
      - name: Upload Test results2
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report2
           path: ${{github.workspace}}/reports

  # build:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.8, 3.9]

  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: gaurav-nelson/github-action-markdown-link-check@v1
  #     with:
  #       config-file: './.github/workflows/md-link-check.config.json'
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #       if [ -f dev_requirements.txt ]; then pip install -r dev_requirements.txt; fi
  #   - name: Lint with pylint
  #     run: |
  #       # stop the build if there are Python syntax errors or undefined names
  #       pylint ./cloudrail
  #   - name: Test with pytest
  #     run: |
  #       pytest --junit-xml pytest.xml
  #   - name: Upload Unit Test Results
  #     uses: actions/upload-artifact@v2
  #     if: success() || failure()
  #     with:
  #       name: Unit Test Results (Python ${{ matrix.python-version }})
  #       path: pytest.xml
  #   - name: Ensure that mkdocs build pass
  #     run: |
  #       pip install livereload mkdocs mkdocs-material mkdocstrings
  #       mkdocs build 2> >(tee -a mkdocs_builds_results.txt >&2)
  #       if grep "The following pages exist in the docs directory" mkdocs_builds_results.txt
  #       then
  #         echo "Some *.md files are not referenced in mkdocs.yml, please add them. See output above."
  #         exit 1
  #       fi
        
  # publish-test-results:
  #   name: Publish Test Report
  #   runs-on: ubuntu-latest
  #   if: success() || failure()
  #   needs: build
  #   steps:
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         path: artifacts
  #     - uses: EnricoMi/publish-unit-test-result-action@v1
  #       with:
  #         files: artifacts/**/*.xml
  #         fail_on: nothing
  #         check_name: Test Report
